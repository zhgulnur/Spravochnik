# Урок 10. Лекция. Функции высшего порядка, работа с файлами
# Ex 1
'''В списке хранятся числа. Нужно выбрать только четные числа и составить список пар: 
(число, квадрат числа)'''

# list1 = [1, 2, 3, 5, 8, 15, 23, 38]
# # result = []

# # for i in list1:
# #     if i % 2 == 0:
# #         result.append((i, i**2))
    
# # print(result)


# # Используем lambda-функцию для выбора четных чисел и создания списка пар
# result = list(map(lambda x: (x, x*x), filter(lambda x: x % 2 == 0, list1)))
# print(result)

'''В этом примере мы используем filter для выбора четных чисел и map для создания 
списка пар (используя лямбда-функции).'''


# Урок 11. Семинар. Функции высшего порядка
# Ex 1

'''У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине 
программы используется множество раз и вы не хотите ничего сломать):
transformation = <...>
values = [2,3,5,7,11,13,17,19,23,29] # или любой другой список
transformed_values = list(map(transformation, values))
Единственный способ вашего взаимодействия с этим кодом – посредством задания функции 
transformation.
Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать 
список значений, а нужно получить его как есть.
Напишите такое лямбда-выражение transformation, чтобы transformed_values получился 
копией values. Переменная transformation должна быть глобальной, чтобы проверяющая 
система смогла его найти. Кроме transformation вам ничего писать не нужно. 
Печатать на экран – тоже.

Ввод:
values = [1, 23, 42, 'asdfg']
transformed values = list(map(transfornation, values))
if values == transformed_values:
    print('ok')
else:
    print('fail')

Вывод:
    ok
'''


# # def transformation(arr):
# #     arr_new = arr
# #     return arr_new

# transformation = lambda x: x
# values = [1, 23, 42, 'asdfg']
# transformed_values = list(map(transformation, values))
# if values == transformed_values:
#     print('ok')
# else:
#     print('fail')


# Ex 2

'''Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовём самой далёкой 
планетой ту, орбита которой имеет самую большую площадь.
Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит 
планет найдет ту, по которой вращается самая далёкая планета. Круговые орбиты 
не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные 
спутники были запущены на круговые орбиты.
Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты 
самой далёкой планеты.
Каждая орбита представляет из себя кортеж из пары чисел – полуосей её эллипса. 
Площадь эллипса вычисляется по формуле S = πab, где a и b – длины полуосей эллипса.
При решении задачи используйте списочные выражения.
Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую 
большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь.
Гарантируется, что самая далёкая планета ровно одна.

Ввод
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))

Вывод
2.5 10'''

# from math import pi

# def find_farthest_orbit(arr):
#     list1 = [i for i in arr if i[0]!=i[1]] # чтобы убрать круг (6,6)
#     areas = [(pi * i[0] * i[1]) for i in list1]
#     max_area = areas.index(max(areas)) # .index возвращает индекс элемента, что нам и нужно в данном примере
#     return list1[max_area]

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))


# Ex 3
'''Напишите функцию same_by(characteristic, objects), которая проверяет, 
все ли объекты имеют одинаковое значение некоторой характеристики, и возвращает 
True, если это так. Если значение характеристики для разных объектов отличается – 
то False. Для пустого набора объектов, функция должна возвращать True. 
Аргумент characteristic – это функция, которая принимает объект и вычисляет его 
характеристику.

Пример использования функции – проверить, что все числа имеют одинаковую чётность:

same_by( lambda x: x % 2, [0, 2, 10, 6])
#  =>  True
same_by( lambda x: x % 2, [1, 7,  −3])
#  =>  True
same_by( lambda x: x % 2, [])
#  =>  True
same_by( lambda x: x % 2, [1, 2, 3, 4])
#  =>  False'''


# def same_by(characteristic, objects):
#     if not objects:
#         return True
    
#     value = characteristic(objects[0])
    
#     for obj in objects[1:]:
#         if characteristic(obj) != value:
#             return False
            
#     return True
    

# values = [0, 2, 10, 6]
# if same_by(lambda x: x % 2, values):
#     print('same')
# else:
#     print('different')


###### HOMEWORK

# Ex 1
'''Напишите функцию print_operation_table(operation, num_rows, num_columns), 
которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру 
строки и столбца.

Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, 
которые должны быть распечатаны.

Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).

Если строк меньше двух, выдайте текст
ОШИБКА! Размерности таблицы должны быть больше 2!.

Примечание: бинарной операцией называется любая операция, у которой ровно 
два аргумента, как, например, у операции умножения.

Между элементами должен быть 1 пробел, в конце строки пробел не нужен.

На входе:
print_operation_table(lambda x, y: x * y, 3, 3)

На выходе:
1 2 3
2 4 6 
3 6 9'''

# # Мое решение, которое не приняли
# def print_operation_table(operation, num_rows=9, num_columns=9):
#     if num_rows < 2 or num_columns < 2:
#         print('ОШИБКА! Размерности таблицы должны быть больше 2!')
#         return
    
#     table = [[0] * num_columns for i in range(num_rows)]
    
#     for i in range(1, num_rows+1):
#         for j in range(1, num_columns+1):
#             table[i-1][j-1]= operation(i,j)
        
#     for row in table:
#         for elem in row:
#             print(elem, end=" ")
#         print()

# print_operation_table(lambda x, y: x + y, 4, 4)

# ## Решение автотеста:
# def print_operation_table(operation, num_rows=9, num_columns=9):
#     result = []
#     if num_rows < 2 or num_columns < 2:
#         print('ОШИБКА! Размерности таблицы должны быть больше 2!')
#     else:
#         for i in range(1, num_rows + 1):
#             for j in range(1, num_columns + 1):
#                 if j != num_columns :
#                     result.append(f'{operation(i, j)} ')
#                 else:
#                     result.append(operation(i, j))
#             result.append('\n')
#         print(''.join([str(i) for i in result[:len(result) - 1]]))


# Ex 2
'''Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
Поскольку разобраться в его кричалках не настолько просто, насколько легко 
он их придумывает, Вам стоит написать программу.

Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) 
в каждой фразе стихотворения одинаковое.
Фраза может состоять из одного слова, если во фразе несколько слов, то они 
разделяются дефисами.
Фразы отделяются друг от друга пробелами.

Стихотворение  Винни-Пух передаст вам автоматически в переменную stroka 
в виде строки. В ответе напишите 
Парам пам-пам, если с ритмом все в порядке 
и Пам парам, если с ритмом все не в порядке.
Если фраза только одна, то ритм определить не получится и необходимо вывести: 
Количество фраз должно быть больше одной!.

На входе:
stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам'

На выходе:
Парам пам-пам'''


# stroka = 'как ве-тер сме-ёт лис-ти'
# stroka=list(stroka.split())

# if len(stroka) == 1:
#     print('Количество фраз должно быть больше одной!') 
# else: 
#     vowels = ['у', 'е', 'ы', 'а', 'о', 'э', 'я', 'и', 'ю', 'ё']
#     vowel_num = []
#     for word in stroka:
#         count=0
#         for i in word:
#              if i in vowels:
#                   count += 1
#         vowel_num.append(count)
    
#     result = 'Парам пам-пам' if all(x == vowel_num[0] for x in vowel_num[1:]) else 'Пам парам'
#     print(result)
     

    







